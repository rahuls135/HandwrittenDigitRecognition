{"nbformat":4,"nbformat_minor":0,"metadata":{"anaconda-cloud":{},"kernelspec":{"name":"python3","display_name":"Python 3"},"colab":{"provenance":[{"file_id":"1ws497Y4fHyZrjROP4TAKqp1JZi_DPPh2","timestamp":1681788672491},{"file_id":"1uPDR61Fp5hF4JCULZXCm2QWNw3WLt2aw","timestamp":1681328713504},{"file_id":"1LPGvT-j78mHn5qH8eqcCpKDXS4TZbP4N","timestamp":1649692032436},{"file_id":"1yKGrzMfoQi9iD7U6F5hYwt0CqXCN5ugt","timestamp":1618203345963},{"file_id":"https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/3_NeuralNetworks/convolutional_network.ipynb","timestamp":1618194532285}]},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"xxPuFdZK5uy3"},"source":["\n","\n","# **Building a Convolutional Neural Network with TensorFlow.**\n"," \n"," \n","\n","> Foundations of Machine Learning (ENEE436) - Spring 2023\n","\n","> Prof. Behtash Babadi, ECE, UMD\n","\n","Author: Christos Mavridis (<mavridis@umd.edu>)"]},{"cell_type":"markdown","metadata":{"id":"FNv9Ds9k5uy9"},"source":["## MNIST Dataset Overview\n","\n","This example is using MNIST handwritten digits. The dataset contains 60,000 examples for training and 10,000 examples for testing. The digits have been size-normalized and centered in a fixed-size image (28x28 pixels) with values from 0 to 1. \n","\n","<a title=\"By Josef Steppan [CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0)], from Wikimedia Commons\" href=\"https://commons.wikimedia.org/wiki/File:MnistExamples.png\"><img width=\"512\" alt=\"MnistExamples\" src=\"https://upload.wikimedia.org/wikipedia/commons/2/27/MnistExamples.png\"/></a>\n","\n","More info: http://yann.lecun.com/exdb/mnist/"]},{"cell_type":"markdown","metadata":{"id":"JMhCEA5e_e0W"},"source":["## Load MNIST Dataset"]},{"cell_type":"code","metadata":{"id":"XkunKnNr_fzP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682978346132,"user_tz":240,"elapsed":7907,"user":{"displayName":"Rahul Shah","userId":"05570695058428807857"}},"outputId":"ba9a17f7-bb63-4774-b978-e0de2efdf315"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import random\n","import os\n","import distutils\n","if distutils.version.LooseVersion(tf.__version__) <= '2.0':\n","    raise Exception('This notebook is compatible with TensorFlow 1.14 or higher, for TensorFlow 1.13 or lower please use the previous version at https://github.com/tensorflow/tpu/blob/r1.13/tools/colab/fashion_mnist.ipynb')\n","\n","(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n","x_train, x_test = x_train / 255.0, x_test / 255.0\n","y_train0 = y_train\n","y_test0= y_test\n","\n","# add empty color dimension\n","x_train = np.expand_dims(x_train, -1)\n","x_test = np.expand_dims(x_test, -1)\n","\n","print(f'Input image dimension: {x_train.shape[1:]}')"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11490434/11490434 [==============================] - 0s 0us/step\n","Input image dimension: (28, 28, 1)\n"]}]},{"cell_type":"markdown","metadata":{"id":"1_X069QhuXBa"},"source":["# Why CNN?"]},{"cell_type":"markdown","metadata":{"id":"EKETDYiMuZ-N"},"source":["### CNN Overview\n","\n","![CNN](http://personal.ie.cuhk.edu.hk/~ccloy/project_target_code/images/fig3.png)\n","\n","### Convolutions\n","\n","- Reduce number of weights (weight sharing, Toeplitz matrix)\n","- Learn linear time-invariant systems (convolutional filters) which were typically used ad-hoc as pre-processing steps and required domain knowledge (e.g. Laplacian filters = edge detectors in images)\n","- Output size (1D): n-m+1 (n:input size, m:filter size)\n","\n","<img width=\"512\" alt=\"MnistExamples\" src=\"https://miro.medium.com/max/2880/0*QS1ArBEUJjjySXhE.png\"/>\n","\n","### Pooling\n","\n","- Dimensionality reduction\n","- Build hierarchy \n","\n","<img width=\"512\" alt=\"MnistExamples\" src=\"https://computersciencewiki.org/images/8/8a/MaxpoolSample2.png\"/>\n","\n","\n","### Activation functions\n","\n","<img width=\"512\" alt=\"MnistExamples\" src=\"https://miro.medium.com/max/2800/0*44z992IXd9rqyIWk.png\"/>\n","\n","### Softmax --> Gibbs (Boltzmann) distr. --> Probabilities\n","\n","<img width=\"512\" alt=\"MnistExamples\" src=\"https://www.andreaperlato.com/img/softmaxfunction.png\"/>\n","\n","\n","\n","\n","### Automatic feature extraction\n","\n","<img width=\"512\" alt=\"MnistExamples\" src=\"https://miro.medium.com/max/616/1*Uhr-4VDJD0-gnteUNFzZTw.jpeg\"/>\n","\n"]},{"cell_type":"markdown","metadata":{"id":"HuG2yEiDvZH3"},"source":["## Building a CNN: Example of LeNet5\n"]},{"cell_type":"markdown","metadata":{"id":"HZPeNEX0AK_5"},"source":["\n","![CNN](https://cdn-images-1.medium.com/max/800/0*V1vb9SDnsU1eZQUy.jpg)\n","\n","#### MNIST Input\n","    32x32x1 pixels image\n","\n","#### Architecture\n","* **Convolutional #1** \n","    * Filters: 6\n","    * Filter size: 5x5 \n","    * --> Output 28x28x6\n","    * Activation: `relu`\n","\n","* **Pooling #1** \n","    * The output shape should be 14x14x6.\n","\n","* **Convolutional #2** \n","\n","* **Pooling #2** \n","\n","* **Fully Connected #1** outputs 120\n","    \n","* **Fully Connected #2** outputs 84\n","    \n","* **Fully Connected #3** output 10 (# classes)\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"H6MFkQknIfAY"},"source":["## Custom CNN Design\n","\n","#### MNIST Input\n","    28x28x1 pixels image\n","\n"]},{"cell_type":"code","metadata":{"id":"H6sSEiv1ALKK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1682978347421,"user_tz":240,"elapsed":1292,"user":{"displayName":"Rahul Shah","userId":"05570695058428807857"}},"outputId":"38ee4ceb-e320-40e7-cdcf-18e0912f6eee"},"source":["def myCNN():\n","  \n","  model = tf.keras.models.Sequential()\n","\n","  # First Layer\n","  model.add(tf.keras.layers.Conv2D(filters=16, kernel_size=(4, 4), activation='relu',input_shape=x_train.shape[1:]))\n","  model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)))\n","  \n","  # Second Layer\n","  model.add(tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu'))\n","  model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)))\n","\n","  model.add(tf.keras.layers.Flatten())\n","\n","  # Fully-connected NNs\n","  model.add(tf.keras.layers.Dense(units=140, activation='relu'))\n","  model.add(tf.keras.layers.Dense(units=84, activation='relu'))\n","  model.add(tf.keras.layers.Dense(units=10, activation = 'softmax'))\n","  \n","  return model\n","\n","print('Model Structure & Parameters:')\n","model = myCNN()\n","model.summary()"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Structure & Parameters:\n","Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 25, 25, 16)        272       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 12, 12, 16)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 10, 10, 32)        4640      \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 5, 5, 32)         0         \n"," 2D)                                                             \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 3, 3, 32)          9248      \n","                                                                 \n"," max_pooling2d_2 (MaxPooling  (None, 1, 1, 32)         0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 32)                0         \n","                                                                 \n"," dense (Dense)               (None, 140)               4620      \n","                                                                 \n"," dense_1 (Dense)             (None, 84)                11844     \n","                                                                 \n"," dense_2 (Dense)             (None, 10)                850       \n","                                                                 \n","=================================================================\n","Total params: 31,474\n","Trainable params: 31,474\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"-O5S7lao_4nD"},"source":["# Optimization Parameters"]},{"cell_type":"markdown","metadata":{"id":"eLehbYPWz6vv"},"source":["- Stochastic Gradient Descent\n","\n","<img width=\"512\" alt=\"MnistExamples\" src=\"https://miro.medium.com/max/425/1*m1KQOLl-qB0mgRq_IWivnQ.png\"/>\n","\n","- Adaptive momentum method (Adam)\n","\n","<img width=\"256\" alt=\"MnistExamples\" src=\"https://miro.medium.com/max/380/1*Ti-cvetTBXnTsM6rHUhmlg.png\"/>\n","\n","- Race to global minima\n","\n","<img width=\"512\" alt=\"MnistExamples\" src=\"https://miro.medium.com/max/700/1*m7-otgfbxiAvSipInHliXw.gif\"/>\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"YsG3xc7F5uy_","executionInfo":{"status":"ok","timestamp":1682978348011,"user_tz":240,"elapsed":594,"user":{"displayName":"Rahul Shah","userId":"05570695058428807857"}}},"source":["# Training Parameters\n","EPOCHS = 5#10\n","BATCH_SIZE = 128 #128 \n","\n","# Loss Function\n","# loss_fn = tf.keras.losses.categorical_crossentropy\n","# Why don't you try these as well?\n","loss_fn = tf.keras.losses.MeanSquaredError()\n","# loss_fn = tf.keras.losses.Hinge()\n","\n","# Optimization Method\n","optimizer = tf.keras.optimizers.Adam(learning_rate=0.001,beta_1=0.9,beta_2=0.999,epsilon=1e-07,amsgrad=False)\n","# Why don't you try these as well?\n","# optimizer = tf.keras.optimizers.SGD(learning_rate=0.01, momentum=0.0, nesterov=False)\n","# optimizer = tf.keras.optimizers.Adagrad(learning_rate=0.001,initial_accumulator_value=0.1,epsilon=1e-07)\n","\n","model.compile(loss=loss_fn, optimizer=optimizer, metrics=['accuracy'])\n","if loss_fn == tf.keras.losses.categorical_crossentropy:\n","    y_train = tf.keras.utils.to_categorical(y_train0)\n","    y_test = tf.keras.utils.to_categorical(y_test0)"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Iaf8LThZNkI5"},"source":["# Training Loop and Testing Results"]},{"cell_type":"code","metadata":{"id":"hlpuikf8NkSX","colab":{"base_uri":"https://localhost:8080/","height":531},"executionInfo":{"status":"error","timestamp":1682978555825,"user_tz":240,"elapsed":207819,"user":{"displayName":"Rahul Shah","userId":"05570695058428807857"}},"outputId":"ef433b25-c46d-49ca-8df0-9eec70818621"},"source":["model.fit(x_train, y_train,\n","          batch_size=BATCH_SIZE,\n","          epochs=EPOCHS,\n","          verbose=1) # Verbose controls the output frequency during training\n","\n","\n","\n","train_loss, train_acc = model.evaluate(x_train, y_train)\n","test_loss, test_acc = model.evaluate(x_test, y_test)\n","\n","print('Train accuracy:', train_acc)\n","print('Test accuracy:', test_acc)"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","469/469 [==============================] - 59s 114ms/step - loss: 27.3044 - accuracy: 0.1103\n","Epoch 2/5\n","469/469 [==============================] - 31s 67ms/step - loss: 27.3044 - accuracy: 0.1006\n","Epoch 3/5\n","469/469 [==============================] - 31s 66ms/step - loss: 27.3045 - accuracy: 0.1008\n","Epoch 4/5\n","469/469 [==============================] - 33s 70ms/step - loss: 27.3044 - accuracy: 0.0972\n","Epoch 5/5\n","469/469 [==============================] - 32s 67ms/step - loss: 27.3044 - accuracy: 0.0952\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-01ab74ad9ad4>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m model.fit(x_train, y_train,\n\u001b[0m\u001b[1;32m      2\u001b[0m           \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mBATCH_SIZE\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m           \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mEPOCHS\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m           verbose=1) # Verbose controls the output frequency during training\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     63\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     66\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"zSmlIJqGZBoC"},"source":["## Plot Prediction and Network Output"]},{"cell_type":"code","metadata":{"id":"4jdEKBFK5uzE","executionInfo":{"status":"aborted","timestamp":1682978555826,"user_tz":240,"elapsed":5,"user":{"displayName":"Rahul Shah","userId":"05570695058428807857"}}},"source":["n_images = 3\n","outs = list(model.predict(x_test[:n_images,:,:,:]))\n","preds = list(np.argmax(model.predict(x_test[:n_images,:,:,:]), axis=-1))\n","\n","# Display\n","for i in range(n_images):\n","    plt.imshow(x_test[i,:,:,0], cmap='gray')\n","    plt.show()\n","    print(\"Network prediction:\", preds[i])\n","    print(\"Network Output:\", [\"%0.9f\" % j for j in outs[i]])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"F7RGUcw-NCMe"},"source":["# Food for thought\n","\n","- Artificial Intelligence = Machine Learning = Neural Networks ???\n","- Moravec’s Paradox: “It is comparatively easy to make computers exhibit adult level performance on intelligence tests, playing checkers or calculating pi to a billion digits, but difficult or impossible to give them the skills of a one-year-old when it comes to perception and mobility… The mental abilities of a child that we take for granted – recognizing a face, lifting a pencil, or walking across a room – in fact solve some of the hardest engineering problems ever conceived… Encoded in the large, highly evolved sensory and motor portions of the human brain is a billion years of experience about the nature of the world and how to survive in it. ”\n","- AI winters: Over-promising and Under-delivering \n","- AI Revolution: Has it happened yet? ([Michael I. Jordan](https://hdsr.mitpress.mit.edu/pub/wot7mkc1/release/9))"]}]}